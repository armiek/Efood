#################################
#####     1st query    #########
################################

# This query uses a number of subqueries to calculate the metrics for each city. 
# The first subquery, orders_by_city, aggregates the order and user count, as well as the total amount, 
# for each city and cuisine. The second subquery, breakfast_metrics, calculates the same metrics, but only for the Breakfast cuisine. 
# The final subquery, filtered_cities, filters the cities to only those with more than 1000 orders 
# and aggregates the metrics for the entire city, combining the results of the first two subqueries. 
# The final query then calculates the desired metrics based on the filtered cities and orders the result by 
# the number of breakfast orders, showing the 5 cities with the most breakfast orders.



WITH orders_by_city AS (
  SELECT 
    city,
    cuisine,
    count(DISTINCT order_id) AS order_count,
    count(DISTINCT user_id) AS user_count,
    sum(amount) AS total_amount
  FROM 
    `efood2022-a.main_assessment.orders` 
  GROUP BY 
    city, 
    cuisine
),
breakfast_metrics AS (
  SELECT 
    city,
    sum(CASE WHEN cuisine = 'Breakfast' THEN order_count ELSE 0 END) AS breakfast_order_count,
    sum(CASE WHEN cuisine = 'Breakfast' THEN user_count ELSE 0 END) AS breakfast_user_count,
    sum(CASE WHEN cuisine = 'Breakfast' THEN total_amount ELSE 0 END) AS breakfast_amount
  FROM 
    orders_by_city 
  GROUP BY 
    city
),
filtered_cities AS (
  SELECT 
    city,
    breakfast_order_count,
    breakfast_user_count,
    breakfast_amount,
    sum(order_count) AS total_order_count,
    sum(user_count) AS total_user_count,
    sum(total_amount) AS total_amount
  FROM 
    orders_by_city 
    JOIN breakfast_metrics 
      ON orders_by_city.city = breakfast_metrics.city
  WHERE 
    total_order_count > 1000
  GROUP BY 
    city
)
SELECT 
  city, 
  breakfast_amount / breakfast_order_count AS breakfast_basket,
  total_amount / total_order_count AS total_basket,
  breakfast_order_count / breakfast_user_count AS breakfast_frequency,
  total_order_count / total_user_count AS total_frequency,
  SUM(CASE WHEN breakfast_frequency > 3 THEN 1 ELSE 0 END) / breakfast_user_count * 100 AS pct_breakfast_users_exceed_3_orders,
  SUM(CASE WHEN total_frequency > 3 THEN 1 ELSE 0 END) / total_user_count * 100 AS pct_total_users_exceed_3_orders
FROM 
  filtered_cities 
GROUP BY 
  city
ORDER BY 
  breakfast_order_count DESC
LIMIT 5;


   



#####################################
#####       2nd query       #######        
####################################

## This query creates two subqueries: 
## 1. 'city_data' aggregates the total number of orders placed by each user in each city.
## 2. 'top_users' filters city_data to only include the top 10 users of each city, based on the number of orders they placed. 
## the user_rank column is used to determine on the number of orders they placed. The user_rank column is used to determine 
## the rank of each user. 
## the main query selects the city and the sum of orders placed by the top 10, users of each city, 
## divided by the total number of orders placed in the city. The result is a percentage.


WITH city_data AS (
  SELECT 
    city, 
    user_id, 
    COUNT(order_id) AS user_orders
  FROM 
    `efood2022-a.main_assessment.orders`
  GROUP BY 
    city, user_id
),
top_users AS (
  SELECT 
    city, 
    user_id, 
    user_orders,
    ROW_NUMBER() OVER (PARTITION BY city ORDER BY user_orders DESC) AS user_rank
  FROM 
    city_data
)
SELECT 
  city, 
  SUM(user_orders) / (SELECT COUNT(order_id) FROM `efood2022-a.main_assessment.orders` WHERE city = top_users.city) * 100 AS percent_contributed
FROM 
  top_users
WHERE 
  user_rank <= 10
GROUP BY 
  city
